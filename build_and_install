#!/usr/bin/env bash

source environment.sh

cat <<EOF

    === PySide BuildScripts Configuration ===

    Installation prefix:    $PYSIDESANDBOXPATH
    Build type:             $BUILD_TYPE
    Target Python version:  $PYTHONXY
    Build for Python 3:     $PYSIDE_BUILDSCRIPTS_USE_PYTHON3


EOF


for d in shiboken pyside pyside-tools; do
    rm -rf "$d/build"
    mkdir -p "$d/build"

    source environment-python2.7.sh
    (
	source environment.sh

	if [ "`uname -s`" == "Darwin" ]; then
	    # When running on Mac OS X, we need to specify the
	    # Qt include dir for the header files to be found.
	    echo "$0: Mac OS X detected (uname -s gave 'Darwin')."
	    PYSIDE_BS_CMAKE_FLAGS="-DALTERNATIVE_QT_INCLUDE_DIR=/Library/Frameworks/"
	else
	    # On Non-OS X builds, we enable this to fix a gcc bug
	    PYSIDE_BS_CMAKE_FLAGS="-DENABLE_GCC_OPTIMIZATION=On -DPYTHON_INCLUDE_DIR=$PYTHON_INCLUDE_DIR -DPYTHON_LIBRARY=$PYTHON_LIBRARY"
	fi

	if [ "$Q_WS_SIMULATOR" == "yes" ]; then
	    PYSIDE_BS_CMAKE_FLAGS=$PYSIDE_BS_CMAKE_FLAGS" -DQ_WS_SIMULATOR=yes"
	fi

	if [ "$PYSIDE_BUILDSCRIPTS_USE_PYTHON3" == "yes" ]; then
	    PYSIDE_BS_CMAKE_FLAGS=$PYSIDE_BS_CMAKE_FLAGS" -DUSE_PYTHON3=1"
	fi

	cd "$d/build"
	cmake .. -DCMAKE_INSTALL_PREFIX=$PYSIDESANDBOXPATH \
		 -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
		 -DENABLE_ICECC=0 \
		 $PYSIDE_BS_CMAKE_FLAGS \
	    && make -j4 && make install || exit 1
    ) || exit 1

    # If you are experiencing problems on OS X, uncomment the
    # following line to update the run-time linker cache:
    # sudo ldconfig
done
