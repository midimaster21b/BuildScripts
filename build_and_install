#!/usr/bin/env bash

source environment.sh

cat <<EOF

    === PySide BuildScripts Configuration ===

    Installation prefix:    $PYSIDESANDBOXPATH
    Build type:             $BUILD_TYPE
    Target Python version:  $PYTHONXY
    Build for Python 3:     $PYSIDE_BUILDSCRIPTS_USE_PYTHON3


EOF


for d in shiboken pyside pyside-tools; do
    rm -rf "$d/build"
    mkdir -p "$d/build"


    PYENV_SHIMS=$(expr `which python` : '.*\(.pyenv/shims\).*')

    if [[ $PYENV_SHIMS == '.pyenv/shims' ]]; then
	echo "pyenv is used."
	PYTHON_EXECUTABLE=`pyenv which python`
    else
	echo "pyenv not present."
	PYTHON_EXECUTABLE=`which python`
    fi

    echo "Python executable file: $PYTHON_EXECUTABLE"

    # Find python installation prefix
    PYTHON_EXECUTABLE_ENDING='/bin/python'
    PYTHON_PREFIX=`expr "$PYTHON_EXECUTABLE" : "\(.*\)$PYTHON_EXECUTABLE_ENDING"`
    if [[ -e $PYTHON_PREFIX ]]; then
	echo "Python installation prefix: $PYTHON_PREFIX"
    else
	echo 'Python installation prefix not found.'
	exit 1
    fi

    # Find python include directory
    PYTHON_INCLUDE_DIR="$PYTHON_PREFIX/include/python2.7"
    if [[ -e $PYTHON_INCLUDE_DIR ]]; then
	echo "Python include directory: $PYTHON_INCLUDE_DIR"
    else
	echo 'Error finding python include directory.'
	exit 1
    fi

    export PYTHON_INCLUDE_DIR=$PYTHON_INCLUDE_DIR

    # -L vs. -h ?
    # If is a symbolic link
    if [[ -L $PYTHON_INCLUDE_DIR ]]; then
	PYTHON_LIBRARY_PREFIX=`readlink -f $PYTHON_INCLUDE_DIR/../..`
    else
	PYTHON_LIBRARY_PREFIX=$PYTHON_PREFIX
    fi

    echo "Library prefix is: $PYTHON_LIBRARY_PREFIX"

    PYTHON_DYN_LIB_FILE="$PYTHON_LIBRARY_PREFIX/lib/libpython2.7.so" # (pyenv)
    PYTHON_DYN_LIB_FILE_TWO="$PYTHON_LIBRARY_PREFIX/lib/python2.7/config/libpython2.7.so" # Did this ever work? YEP! (System)

    # Find python library file
    if [[ -e $PYTHON_DYN_LIB_FILE ]]; then
	PYTHON_LIBRARY_FILE=$PYTHON_DYN_LIB_FILE
    elif [[ -e $PYTHON_DYN_LIB_FILE_TWO ]]; then
	PYTHON_LIBRARY_FILE=$PYTHON_DYN_LIB_FILE_TWO
    else
	echo "Error finding python library file."
	exit 1
    fi

    echo "Python library file: $PYTHON_LIBRARY_FILE"
    export PYTHON_LIBRARY=$PYTHON_LIBRARY_FILE

    (
	source environment.sh

	if [ "`uname -s`" == "Darwin" ]; then
	    # When running on Mac OS X, we need to specify the
	    # Qt include dir for the header files to be found.
	    echo "$0: Mac OS X detected (uname -s gave 'Darwin')."
	    PYSIDE_BS_CMAKE_FLAGS="-DALTERNATIVE_QT_INCLUDE_DIR=/Library/Frameworks/"
	else
	    # On Non-OS X builds, we enable this to fix a gcc bug
	    PYSIDE_BS_CMAKE_FLAGS="-DENABLE_GCC_OPTIMIZATION=On -DPYTHON_INCLUDE_DIR=$PYTHON_INCLUDE_DIR -DPYTHON_LIBRARY=$PYTHON_LIBRARY"
	fi

	if [ "$Q_WS_SIMULATOR" == "yes" ]; then
	    PYSIDE_BS_CMAKE_FLAGS=$PYSIDE_BS_CMAKE_FLAGS" -DQ_WS_SIMULATOR=yes"
	fi

	if [ "$PYSIDE_BUILDSCRIPTS_USE_PYTHON3" == "yes" ]; then
	    PYSIDE_BS_CMAKE_FLAGS=$PYSIDE_BS_CMAKE_FLAGS" -DUSE_PYTHON3=1"
	fi

	cd "$d/build"
	cmake .. -DCMAKE_INSTALL_PREFIX=$PYSIDESANDBOXPATH \
		 -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
		 -DENABLE_ICECC=0 \
		 $PYSIDE_BS_CMAKE_FLAGS \
	    && make -j4 && make install || exit 1
    ) || exit 1

    # If you are experiencing problems on OS X, uncomment the
    # following line to update the run-time linker cache:
    # sudo ldconfig
done
